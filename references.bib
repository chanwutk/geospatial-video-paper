@inproceedings{berger:projection, 
author = {Berger, Thorsten and V\"{o}lter, Markus and Jensen, Hans Peter and Dangprasert, Taweesap and Siegmund, Janet}, 
title = {Efficiency of Projectional Editing: A Controlled Experiment}, 
year = {2016}, isbn = {9781450342186}, 
publisher = {Association for Computing Machinery}, 
address = {New York, NY, USA}, 
url = {https://doi-org.libproxy.berkeley.edu/10.1145/2950290.2950315}, 
doi = {10.1145/2950290.2950315}, 
abstract = { Projectional editors are editors where a user's editing actions directly change the abstract syntax tree without using a parser. They promise essentially unrestricted language com position as well as flexible notations, which supports aligning languages with their respective domain and constitutes an essential ingredient of model-driven development. Such editors have existed since the 1980s and gained widespread attention with the Intentional Programming paradigm, which used projectional editing at its core. However, despite the benefits, programming still mainly relies on editing textual code, where projectional editors imply a very different -- typically perceived as worse -- editing experience, often seen as the main challenge prohibiting their widespread adoption. We present an experiment of code-editing activities in a projectional editor, conducted with 19 graduate computer-science students and industrial developers. We investigate the effects of projectional editing on editing efficiency, editing strategies, and error rates -- each of which we also compare to conventional, parser-based editing. We observe that editing is efficient for basic-editing tasks, but that editing strategies and typical errors differ. More complex tasks require substantial experience and a better understanding of the abstract-syntax-tree structure -- then, projectional editing is also efficient. We also witness a tradeoff between fewer typing mistakes and an increased complexity of code editing. }, 
booktitle = {Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering}, 
pages = {763–774}, 
numpages = {12}, 
keywords = {experiment, language workbench, projectional editing}, 
location = {Seattle, WA, USA}, 
series = {FSE 2016} 
}

@misc{blinn:fructure,
  url = {https://github.com/disconcision/fructure},
  author = {Andrew Blinn},
  title = {Fructure: A structured interaction engine in Racket},
  year = {2020},
  copyright = {Apache License 2.0},
  publisher = {GitHub},
  journal = {GitHub repository},
  commit = {d434086052eab3c450f631b7b14dcbf9358f45b7}
}

@misc{ceasar:nuscenes,
  doi = {10.48550/ARXIV.1903.11027},
  url = {https://arxiv.org/abs/1903.11027},
  author = {Caesar, Holger and Bankiti, Varun and Lang, Alex H. and Vora, Sourabh and Liong, Venice Erin and Xu, Qiang and Krishnan, Anush and Pan, Yu and Baldan, Giancarlo and Beijbom, Oscar},
  keywords = {Machine Learning (cs.LG), Computer Vision and Pattern Recognition (cs.CV), Robotics (cs.RO), Machine Learning (stat.ML), FOS: Computer and information sciences, FOS: Computer and information sciences},
  title = {nuScenes: A multimodal dataset for autonomous driving},
  publisher = {arXiv},
  year = {2019},
  copyright = {arXiv.org perpetual, non-exclusive license}
}

@misc{kim:scenic-validation,
  doi = {10.48550/ARXIV.2112.00206},
  url = {https://arxiv.org/abs/2112.00206},
  author = {Kim, Edward and Shenoy, Jay and Junges, Sebastian and Fremont, Daniel and Sangiovanni-Vincentelli, Alberto and Seshia, Sanjit},
  keywords = {Computer Vision and Pattern Recognition (cs.CV), Artificial Intelligence (cs.AI), Programming Languages (cs.PL), Robotics (cs.RO), FOS: Computer and information sciences, FOS: Computer and information sciences},
  title = {Querying Labelled Data with Scenario Programs for Sim-to-Real Validation},
  publisher = {arXiv},
  year = {2021},
  copyright = {Creative Commons Attribution 4.0 International}
}

@misc{fremont:scenic,
  doi = {10.48550/ARXIV.2010.06580},
  url = {https://arxiv.org/abs/2010.06580},
  author = {Fremont, Daniel J. and Kim, Edward and Dreossi, Tommaso and Ghosh, Shromona and Yue, Xiangyu and Sangiovanni-Vincentelli, Alberto L. and Seshia, Sanjit A.},
  keywords = {Programming Languages (cs.PL), Computer Vision and Pattern Recognition (cs.CV), Machine Learning (cs.LG), FOS: Computer and information sciences, FOS: Computer and information sciences},
  title = {Scenic: A Language for Scenario Specification and Data Generation},
  publisher = {arXiv},
  year = {2020},
  copyright = {arXiv.org perpetual, non-exclusive license}
}

@misc{redmon:yolo,
  doi = {10.48550/ARXIV.1506.02640},
  url = {https://arxiv.org/abs/1506.02640},
  author = {Redmon, Joseph and Divvala, Santosh and Girshick, Ross and Farhadi, Ali},
  keywords = {Computer Vision and Pattern Recognition (cs.CV), FOS: Computer and information sciences, FOS: Computer and information sciences},
  title = {You Only Look Once: Unified, Real-Time Object Detection},
  publisher = {arXiv},
  year = {2015},
  copyright = {arXiv.org perpetual, non-exclusive license}
}

@misc{wojke:deepsort,
  doi = {10.48550/ARXIV.1703.07402},
  url = {https://arxiv.org/abs/1703.07402},
  author = {Wojke, Nicolai and Bewley, Alex and Paulus, Dietrich},
  keywords = {Computer Vision and Pattern Recognition (cs.CV), FOS: Computer and information sciences, FOS: Computer and information sciences},
  title = {Simple Online and Realtime Tracking with a Deep Association Metric},
  publisher = {arXiv},
  year = {2017},
  copyright = {arXiv.org perpetual, non-exclusive license}
}

@inproceedings{haynes:visualworlddb,
  title={VisualWorldDB: A DBMS for the Visual World.},
  author={Haynes, Brandon and Daum, Maureen and Mazumdar, Amrita and Balazinska, Magdalena and Cheung, Alvin and Ceze, Luis},
  booktitle={CIDR},
  year={2020}
}

@article{ge:apperception,
author = {Ge, Yongming and Lin, Vanessa and Daum, Maureen and Haynes, Brandon and Cheung, Alvin and Balazinska, Magdalena},
title = {Demonstration of Apperception: A Database Management System for Geospatial Video Data},
year = {2021},
issue_date = {July 2021},
publisher = {VLDB Endowment},
volume = {14},
number = {12},
issn = {2150-8097},
url = {https://doi.org/10.14778/3476311.3476340},
doi = {10.14778/3476311.3476340},
abstract = {Many recent video applications---including traffic monitoring, drone analytics, autonomous driving, and virtual reality---require piecing together, combining, and operating over many related video streams. Despite the massive data volumes involved and the need to jointly reason (both spatially and temporally) about these videos, current techniques to store and manipulate such data are often limited to file systems and simple video processing frameworks that reason about a single video in isolation.We present Apperception, a new type of database management system optimized for geospatial video applications. Apperception comes with an easy to use data model to reason about multiple geospatial video data streams, and a programming interface for developers to collectively reason about the entities observed in those videos. Our demo will let users write queries over video using Apperception and retrieve (in real-time) both metadata and rendered video data. Users can also compare results and observe speedups achieved by using Apperception.},
journal = {Proc. VLDB Endow.},
month = {jul},
pages = {2767–2770},
numpages = {4}
}

@misc{radford:clip,
  doi = {10.48550/ARXIV.2103.00020},
  url = {https://arxiv.org/abs/2103.00020},
  author = {Radford, Alec and Kim, Jong Wook and Hallacy, Chris and Ramesh, Aditya and Goh, Gabriel and Agarwal, Sandhini and Sastry, Girish and Askell, Amanda and Mishkin, Pamela and Clark, Jack and Krueger, Gretchen and Sutskever, Ilya},
  keywords = {Computer Vision and Pattern Recognition (cs.CV), Machine Learning (cs.LG), FOS: Computer and information sciences, FOS: Computer and information sciences},
  title = {Learning Transferable Visual Models From Natural Language Supervision},
  publisher = {arXiv},
  year = {2021},
  copyright = {arXiv.org perpetual, non-exclusive license}
}

@misc{fu:rekall,
    doi = {10.48550/ARXIV.1910.02993},
    url = {https://arxiv.org/abs/1910.02993},
    author = {Fu, Daniel Y. and Crichton, Will and Hong, James and Yao, Xinwei and Zhang, Haotian and Truong, Anh and Narayan, Avanika and Agrawala, Maneesh and Ré, Christopher and Fatahalian, Kayvon},
    keywords = {Databases (cs.DB), Computation and Language (cs.CL), Computer Vision and Pattern Recognition (cs.CV), Information Retrieval (cs.IR), FOS: Computer and information sciences, FOS: Computer and information sciences},
    title = {Rekall: Specifying Video Events using Compositions of Spatiotemporal Labels},
    publisher = {arXiv},
    year = {2019},
    copyright = {arXiv.org perpetual, non-exclusive license}
}

@book{van:python,
    author = {Van Rossum, Guido and Drake, Fred L.},
    title = {Python 3 Reference Manual},
    year = {2009},
    isbn = {1441412697},
    publisher = {CreateSpace},
    address = {Scotts Valley, CA}
}

@article{zimanyi:mobility,
    author = {Zim\'{a}nyi, Esteban and Sakr, Mahmoud and Lesuisse, Arthur},
    title = {MobilityDB: A Mobility Database Based on PostgreSQL and PostGIS},
    year = {2020},
    issue_date = {December 2020},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {45},
    number = {4},
    issn = {0362-5915},
    url = {https://doi.org/10.1145/3406534},
    doi = {10.1145/3406534},
    abstract = {Despite two decades of research in moving object databases and a few research prototypes that have been proposed, there is not yet a mainstream system targeted for industrial use. In this article, we present MobilityDB, a moving object database that extends the type system of PostgreSQL and PostGIS with abstract data types for representing moving object data. The types are fully integrated into the platform to reuse its powerful data management features. Furthermore, MobilityDB builds on existing operations, indexing, aggregation, and optimization framework. This is all made accessible via the SQL query interface.},
    journal = {ACM Trans. Database Syst.},
    month = {dec},
    articleno = {19},
    numpages = {42},
    keywords = {spatiotemporal data management, mobility data management, SQL, Moving object databases}
}

@software{pandas,
    author       = {The pandas development team},
    title        = {pandas-dev/pandas: Pandas},
    month        = feb,
    year         = 2020,
    publisher    = {Zenodo},
    version      = {latest},
    doi          = {10.5281/zenodo.3509134},
    url          = {https://doi.org/10.5281/zenodo.3509134}
}

@InProceedings{mckinney:pandas,
  author    = { Wes McKinney },
  title     = { {D}ata {S}tructures for {S}tatistical {C}omputing in {P}ython },
  booktitle = { {P}roceedings of the 9th {P}ython in {S}cience {C}onference },
  pages     = { 56 - 61 },
  year      = { 2010 },
  editor    = { {S}t\'efan van der {W}alt and {J}arrod {M}illman },
  doi       = { 10.25080/Majora-92bf1922-00a }
}

@Manual{wickham:dplyr,
  title = {dplyr: A Grammar of Data Manipulation},
  author = {Hadley Wickham and Romain François and Lionel Henry and Kirill Müller},
  year = {2022},
  note = {https://dplyr.tidyverse.org,
https://github.com/tidyverse/dplyr},
}

@inbook{santos:javardise,
author = {Santos, Andr\'{e} L.},
title = {Javardise: A Structured Code Editor for Programming Pedagogy in Java},
year = {2020},
isbn = {9781450375078},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3397537.3397561},
abstract = {The syntax of a programming language is the textual form - that conforms to a grammar - to express instructions of a programming model. The key idea of structured code editors is to constrain editing to syntactically valid program code, that is, the modifications ensure that the source code always conforms to the grammar. Syntax is considered an entry barrier when learning how to program. In this work we rehash the concept of structured code editors targeting programming education. We present Javardise, a structured editor for a subset of the Java language, and discuss its features in the light of programming pedagogy.},
booktitle = {Conference Companion of the 4th International Conference on Art, Science, and Engineering of Programming},
pages = {120–125},
numpages = {6}
}

@article{weintrop:block-based,
author = {Weintrop, David and Wilensky, Uri},
title = {Comparing Block-Based and Text-Based Programming in High School Computer Science Classrooms},
year = {2017},
issue_date = {March 2018},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {1},
url = {https://doi.org/10.1145/3089799},
doi = {10.1145/3089799},
abstract = {The number of students taking high school computer science classes is growing. Increasingly, these students are learning with graphical, block-based programming environments either in place of or prior to traditional text-based programming languages. Despite their growing use in formal settings, relatively little empirical work has been done to understand the impacts of using block-based programming environments in high school classrooms. In this article, we present the results of a 5-week, quasi-experimental study comparing isomorphic block-based and text-based programming environments in an introductory high school programming class. The findings from this study show students in both conditions improved their scores between pre- and postassessments; however, students in the blocks condition showed greater learning gains and a higher level of interest in future computing courses. Students in the text condition viewed their programming experience as more similar to what professional programmers do and as more effective at improving their programming ability. No difference was found between students in the two conditions with respect to confidence or enjoyment. The implications of these findings with respect to pedagogy and design are discussed, along with directions for future work.},
journal = {ACM Trans. Comput. Educ.},
month = {oct},
articleno = {3},
numpages = {25},
keywords = {design, Block-based programming, programming environments}
}

@online{mcdowell:myanmar,
  author = {Robin McDowell AND Margie Mason},
  title = {AP Investigation: Myanmar's junta using bodies to terrorize},
  year = 2021,
  url = {https://apnews.com/article/myanmar-business-b2187c696e428139437778aeab0c43d4},
  urldate = {2022-05-14}
}